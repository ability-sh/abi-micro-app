// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: uv-pb-app.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	//*
	// 创建应用
	AppCreate(ctx context.Context, in *AppCreateTask, opts ...grpc.CallOption) (*AppResult, error)
	//*
	// 删除应用
	AppRemove(ctx context.Context, in *AppRemoveTask, opts ...grpc.CallOption) (*AppResult, error)
	//*
	// 修改应用
	AppSet(ctx context.Context, in *AppSetTask, opts ...grpc.CallOption) (*AppResult, error)
	//*
	// 获取单个应用
	AppGet(ctx context.Context, in *AppGetTask, opts ...grpc.CallOption) (*AppResult, error)
	//*
	// 查询多个应用
	AppQuery(ctx context.Context, in *AppQueryTask, opts ...grpc.CallOption) (*AppQueryResult, error)
	//*
	// 创建应用版本
	VerCreate(ctx context.Context, in *VerCreateTask, opts ...grpc.CallOption) (*VerResult, error)
	//*
	// 删除应用版本
	VerRemove(ctx context.Context, in *VerRemoveTask, opts ...grpc.CallOption) (*VerResult, error)
	//*
	// 修改应用版本
	VerSet(ctx context.Context, in *VerSetTask, opts ...grpc.CallOption) (*VerResult, error)
	//*
	// 获取单个应用版本
	VerGet(ctx context.Context, in *VerGetTask, opts ...grpc.CallOption) (*VerResult, error)
	//*
	// 查询多个应用版本
	VerQuery(ctx context.Context, in *VerQueryTask, opts ...grpc.CallOption) (*VerQueryResult, error)
	//*
	// 获取应用包URL
	VerGetURL(ctx context.Context, in *VerGetURLTask, opts ...grpc.CallOption) (*VerGetURLResult, error)
	//*
	// 获取应用包上传URL
	VerUpURL(ctx context.Context, in *VerUpURLTask, opts ...grpc.CallOption) (*VerUpURLResult, error)
	//*
	// 创建容器
	ContainerCreate(ctx context.Context, in *ContainerCreateTask, opts ...grpc.CallOption) (*ContainerResult, error)
	//*
	// 删除应用版本
	ContainerRemove(ctx context.Context, in *ContainerRemoveTask, opts ...grpc.CallOption) (*ContainerResult, error)
	//*
	// 修改应用版本
	ContainerSet(ctx context.Context, in *ContainerSetTask, opts ...grpc.CallOption) (*ContainerResult, error)
	//*
	// 获取单个应用版本
	ContainerGet(ctx context.Context, in *ContainerGetTask, opts ...grpc.CallOption) (*ContainerResult, error)
	//*
	// 查询多个应用版本
	ContainerQuery(ctx context.Context, in *ContainerQueryTask, opts ...grpc.CallOption) (*ContainerQueryResult, error)
	//*
	// 容器添加应用
	AcAdd(ctx context.Context, in *AcAddTask, opts ...grpc.CallOption) (*AcResult, error)
	//*
	// 容器删除应用
	AcRemove(ctx context.Context, in *AcRemoveTask, opts ...grpc.CallOption) (*AcResult, error)
	//*
	// 容器修改应用
	AcSet(ctx context.Context, in *AcSetTask, opts ...grpc.CallOption) (*AcResult, error)
	//*
	// 获取单个容器应用
	AcGet(ctx context.Context, in *AcGetTask, opts ...grpc.CallOption) (*AcResult, error)
	//*
	// 查询多个容器应用
	AcQuery(ctx context.Context, in *AcQueryTask, opts ...grpc.CallOption) (*AcQueryResult, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) AppCreate(ctx context.Context, in *AppCreateTask, opts ...grpc.CallOption) (*AppResult, error) {
	out := new(AppResult)
	err := c.cc.Invoke(ctx, "/app.Service/AppCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AppRemove(ctx context.Context, in *AppRemoveTask, opts ...grpc.CallOption) (*AppResult, error) {
	out := new(AppResult)
	err := c.cc.Invoke(ctx, "/app.Service/AppRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AppSet(ctx context.Context, in *AppSetTask, opts ...grpc.CallOption) (*AppResult, error) {
	out := new(AppResult)
	err := c.cc.Invoke(ctx, "/app.Service/AppSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AppGet(ctx context.Context, in *AppGetTask, opts ...grpc.CallOption) (*AppResult, error) {
	out := new(AppResult)
	err := c.cc.Invoke(ctx, "/app.Service/AppGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AppQuery(ctx context.Context, in *AppQueryTask, opts ...grpc.CallOption) (*AppQueryResult, error) {
	out := new(AppQueryResult)
	err := c.cc.Invoke(ctx, "/app.Service/AppQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) VerCreate(ctx context.Context, in *VerCreateTask, opts ...grpc.CallOption) (*VerResult, error) {
	out := new(VerResult)
	err := c.cc.Invoke(ctx, "/app.Service/VerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) VerRemove(ctx context.Context, in *VerRemoveTask, opts ...grpc.CallOption) (*VerResult, error) {
	out := new(VerResult)
	err := c.cc.Invoke(ctx, "/app.Service/VerRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) VerSet(ctx context.Context, in *VerSetTask, opts ...grpc.CallOption) (*VerResult, error) {
	out := new(VerResult)
	err := c.cc.Invoke(ctx, "/app.Service/VerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) VerGet(ctx context.Context, in *VerGetTask, opts ...grpc.CallOption) (*VerResult, error) {
	out := new(VerResult)
	err := c.cc.Invoke(ctx, "/app.Service/VerGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) VerQuery(ctx context.Context, in *VerQueryTask, opts ...grpc.CallOption) (*VerQueryResult, error) {
	out := new(VerQueryResult)
	err := c.cc.Invoke(ctx, "/app.Service/VerQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) VerGetURL(ctx context.Context, in *VerGetURLTask, opts ...grpc.CallOption) (*VerGetURLResult, error) {
	out := new(VerGetURLResult)
	err := c.cc.Invoke(ctx, "/app.Service/VerGetURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) VerUpURL(ctx context.Context, in *VerUpURLTask, opts ...grpc.CallOption) (*VerUpURLResult, error) {
	out := new(VerUpURLResult)
	err := c.cc.Invoke(ctx, "/app.Service/VerUpURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContainerCreate(ctx context.Context, in *ContainerCreateTask, opts ...grpc.CallOption) (*ContainerResult, error) {
	out := new(ContainerResult)
	err := c.cc.Invoke(ctx, "/app.Service/ContainerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContainerRemove(ctx context.Context, in *ContainerRemoveTask, opts ...grpc.CallOption) (*ContainerResult, error) {
	out := new(ContainerResult)
	err := c.cc.Invoke(ctx, "/app.Service/ContainerRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContainerSet(ctx context.Context, in *ContainerSetTask, opts ...grpc.CallOption) (*ContainerResult, error) {
	out := new(ContainerResult)
	err := c.cc.Invoke(ctx, "/app.Service/ContainerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContainerGet(ctx context.Context, in *ContainerGetTask, opts ...grpc.CallOption) (*ContainerResult, error) {
	out := new(ContainerResult)
	err := c.cc.Invoke(ctx, "/app.Service/ContainerGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContainerQuery(ctx context.Context, in *ContainerQueryTask, opts ...grpc.CallOption) (*ContainerQueryResult, error) {
	out := new(ContainerQueryResult)
	err := c.cc.Invoke(ctx, "/app.Service/ContainerQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AcAdd(ctx context.Context, in *AcAddTask, opts ...grpc.CallOption) (*AcResult, error) {
	out := new(AcResult)
	err := c.cc.Invoke(ctx, "/app.Service/AcAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AcRemove(ctx context.Context, in *AcRemoveTask, opts ...grpc.CallOption) (*AcResult, error) {
	out := new(AcResult)
	err := c.cc.Invoke(ctx, "/app.Service/AcRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AcSet(ctx context.Context, in *AcSetTask, opts ...grpc.CallOption) (*AcResult, error) {
	out := new(AcResult)
	err := c.cc.Invoke(ctx, "/app.Service/AcSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AcGet(ctx context.Context, in *AcGetTask, opts ...grpc.CallOption) (*AcResult, error) {
	out := new(AcResult)
	err := c.cc.Invoke(ctx, "/app.Service/AcGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AcQuery(ctx context.Context, in *AcQueryTask, opts ...grpc.CallOption) (*AcQueryResult, error) {
	out := new(AcQueryResult)
	err := c.cc.Invoke(ctx, "/app.Service/AcQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations should embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	//*
	// 创建应用
	AppCreate(context.Context, *AppCreateTask) (*AppResult, error)
	//*
	// 删除应用
	AppRemove(context.Context, *AppRemoveTask) (*AppResult, error)
	//*
	// 修改应用
	AppSet(context.Context, *AppSetTask) (*AppResult, error)
	//*
	// 获取单个应用
	AppGet(context.Context, *AppGetTask) (*AppResult, error)
	//*
	// 查询多个应用
	AppQuery(context.Context, *AppQueryTask) (*AppQueryResult, error)
	//*
	// 创建应用版本
	VerCreate(context.Context, *VerCreateTask) (*VerResult, error)
	//*
	// 删除应用版本
	VerRemove(context.Context, *VerRemoveTask) (*VerResult, error)
	//*
	// 修改应用版本
	VerSet(context.Context, *VerSetTask) (*VerResult, error)
	//*
	// 获取单个应用版本
	VerGet(context.Context, *VerGetTask) (*VerResult, error)
	//*
	// 查询多个应用版本
	VerQuery(context.Context, *VerQueryTask) (*VerQueryResult, error)
	//*
	// 获取应用包URL
	VerGetURL(context.Context, *VerGetURLTask) (*VerGetURLResult, error)
	//*
	// 获取应用包上传URL
	VerUpURL(context.Context, *VerUpURLTask) (*VerUpURLResult, error)
	//*
	// 创建容器
	ContainerCreate(context.Context, *ContainerCreateTask) (*ContainerResult, error)
	//*
	// 删除应用版本
	ContainerRemove(context.Context, *ContainerRemoveTask) (*ContainerResult, error)
	//*
	// 修改应用版本
	ContainerSet(context.Context, *ContainerSetTask) (*ContainerResult, error)
	//*
	// 获取单个应用版本
	ContainerGet(context.Context, *ContainerGetTask) (*ContainerResult, error)
	//*
	// 查询多个应用版本
	ContainerQuery(context.Context, *ContainerQueryTask) (*ContainerQueryResult, error)
	//*
	// 容器添加应用
	AcAdd(context.Context, *AcAddTask) (*AcResult, error)
	//*
	// 容器删除应用
	AcRemove(context.Context, *AcRemoveTask) (*AcResult, error)
	//*
	// 容器修改应用
	AcSet(context.Context, *AcSetTask) (*AcResult, error)
	//*
	// 获取单个容器应用
	AcGet(context.Context, *AcGetTask) (*AcResult, error)
	//*
	// 查询多个容器应用
	AcQuery(context.Context, *AcQueryTask) (*AcQueryResult, error)
}

// UnimplementedServiceServer should be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) AppCreate(context.Context, *AppCreateTask) (*AppResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppCreate not implemented")
}
func (UnimplementedServiceServer) AppRemove(context.Context, *AppRemoveTask) (*AppResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRemove not implemented")
}
func (UnimplementedServiceServer) AppSet(context.Context, *AppSetTask) (*AppResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppSet not implemented")
}
func (UnimplementedServiceServer) AppGet(context.Context, *AppGetTask) (*AppResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppGet not implemented")
}
func (UnimplementedServiceServer) AppQuery(context.Context, *AppQueryTask) (*AppQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppQuery not implemented")
}
func (UnimplementedServiceServer) VerCreate(context.Context, *VerCreateTask) (*VerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerCreate not implemented")
}
func (UnimplementedServiceServer) VerRemove(context.Context, *VerRemoveTask) (*VerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerRemove not implemented")
}
func (UnimplementedServiceServer) VerSet(context.Context, *VerSetTask) (*VerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerSet not implemented")
}
func (UnimplementedServiceServer) VerGet(context.Context, *VerGetTask) (*VerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerGet not implemented")
}
func (UnimplementedServiceServer) VerQuery(context.Context, *VerQueryTask) (*VerQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerQuery not implemented")
}
func (UnimplementedServiceServer) VerGetURL(context.Context, *VerGetURLTask) (*VerGetURLResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerGetURL not implemented")
}
func (UnimplementedServiceServer) VerUpURL(context.Context, *VerUpURLTask) (*VerUpURLResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerUpURL not implemented")
}
func (UnimplementedServiceServer) ContainerCreate(context.Context, *ContainerCreateTask) (*ContainerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreate not implemented")
}
func (UnimplementedServiceServer) ContainerRemove(context.Context, *ContainerRemoveTask) (*ContainerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerRemove not implemented")
}
func (UnimplementedServiceServer) ContainerSet(context.Context, *ContainerSetTask) (*ContainerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerSet not implemented")
}
func (UnimplementedServiceServer) ContainerGet(context.Context, *ContainerGetTask) (*ContainerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerGet not implemented")
}
func (UnimplementedServiceServer) ContainerQuery(context.Context, *ContainerQueryTask) (*ContainerQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerQuery not implemented")
}
func (UnimplementedServiceServer) AcAdd(context.Context, *AcAddTask) (*AcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcAdd not implemented")
}
func (UnimplementedServiceServer) AcRemove(context.Context, *AcRemoveTask) (*AcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcRemove not implemented")
}
func (UnimplementedServiceServer) AcSet(context.Context, *AcSetTask) (*AcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcSet not implemented")
}
func (UnimplementedServiceServer) AcGet(context.Context, *AcGetTask) (*AcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcGet not implemented")
}
func (UnimplementedServiceServer) AcQuery(context.Context, *AcQueryTask) (*AcQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcQuery not implemented")
}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_AppCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCreateTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AppCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/AppCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AppCreate(ctx, req.(*AppCreateTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AppRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRemoveTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AppRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/AppRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AppRemove(ctx, req.(*AppRemoveTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AppSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppSetTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AppSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/AppSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AppSet(ctx, req.(*AppSetTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AppGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppGetTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AppGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/AppGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AppGet(ctx, req.(*AppGetTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AppQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppQueryTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AppQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/AppQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AppQuery(ctx, req.(*AppQueryTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_VerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerCreateTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).VerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/VerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).VerCreate(ctx, req.(*VerCreateTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_VerRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerRemoveTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).VerRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/VerRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).VerRemove(ctx, req.(*VerRemoveTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_VerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerSetTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).VerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/VerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).VerSet(ctx, req.(*VerSetTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_VerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerGetTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).VerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/VerGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).VerGet(ctx, req.(*VerGetTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_VerQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerQueryTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).VerQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/VerQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).VerQuery(ctx, req.(*VerQueryTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_VerGetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerGetURLTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).VerGetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/VerGetURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).VerGetURL(ctx, req.(*VerGetURLTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_VerUpURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerUpURLTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).VerUpURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/VerUpURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).VerUpURL(ctx, req.(*VerUpURLTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContainerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContainerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/ContainerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContainerCreate(ctx, req.(*ContainerCreateTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContainerRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerRemoveTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContainerRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/ContainerRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContainerRemove(ctx, req.(*ContainerRemoveTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContainerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerSetTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContainerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/ContainerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContainerSet(ctx, req.(*ContainerSetTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContainerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerGetTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContainerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/ContainerGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContainerGet(ctx, req.(*ContainerGetTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContainerQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerQueryTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContainerQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/ContainerQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContainerQuery(ctx, req.(*ContainerQueryTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AcAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcAddTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AcAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/AcAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AcAdd(ctx, req.(*AcAddTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AcRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcRemoveTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AcRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/AcRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AcRemove(ctx, req.(*AcRemoveTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AcSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcSetTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AcSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/AcSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AcSet(ctx, req.(*AcSetTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AcGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcGetTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AcGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/AcGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AcGet(ctx, req.(*AcGetTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AcQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcQueryTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AcQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.Service/AcQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AcQuery(ctx, req.(*AcQueryTask))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppCreate",
			Handler:    _Service_AppCreate_Handler,
		},
		{
			MethodName: "AppRemove",
			Handler:    _Service_AppRemove_Handler,
		},
		{
			MethodName: "AppSet",
			Handler:    _Service_AppSet_Handler,
		},
		{
			MethodName: "AppGet",
			Handler:    _Service_AppGet_Handler,
		},
		{
			MethodName: "AppQuery",
			Handler:    _Service_AppQuery_Handler,
		},
		{
			MethodName: "VerCreate",
			Handler:    _Service_VerCreate_Handler,
		},
		{
			MethodName: "VerRemove",
			Handler:    _Service_VerRemove_Handler,
		},
		{
			MethodName: "VerSet",
			Handler:    _Service_VerSet_Handler,
		},
		{
			MethodName: "VerGet",
			Handler:    _Service_VerGet_Handler,
		},
		{
			MethodName: "VerQuery",
			Handler:    _Service_VerQuery_Handler,
		},
		{
			MethodName: "VerGetURL",
			Handler:    _Service_VerGetURL_Handler,
		},
		{
			MethodName: "VerUpURL",
			Handler:    _Service_VerUpURL_Handler,
		},
		{
			MethodName: "ContainerCreate",
			Handler:    _Service_ContainerCreate_Handler,
		},
		{
			MethodName: "ContainerRemove",
			Handler:    _Service_ContainerRemove_Handler,
		},
		{
			MethodName: "ContainerSet",
			Handler:    _Service_ContainerSet_Handler,
		},
		{
			MethodName: "ContainerGet",
			Handler:    _Service_ContainerGet_Handler,
		},
		{
			MethodName: "ContainerQuery",
			Handler:    _Service_ContainerQuery_Handler,
		},
		{
			MethodName: "AcAdd",
			Handler:    _Service_AcAdd_Handler,
		},
		{
			MethodName: "AcRemove",
			Handler:    _Service_AcRemove_Handler,
		},
		{
			MethodName: "AcSet",
			Handler:    _Service_AcSet_Handler,
		},
		{
			MethodName: "AcGet",
			Handler:    _Service_AcGet_Handler,
		},
		{
			MethodName: "AcQuery",
			Handler:    _Service_AcQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uv-pb-app.proto",
}
